package mysort

import (
	"fmt"
	"mypublic"
)

func TestMySort() {
	cangetsortmy1()
	n := 20000
	fmt.Println( "Test for random array, size =", n, ", random range [0,", n, "]" )
	arr1 := mypublic.GenerateRandomArray( n, 0, 100000 )
	arr2 := mypublic.CopyIntArray( arr1, n )
	arr3 := mypublic.CopyIntArray( arr1, n )
	arr4 := mypublic.CopyIntArray( arr1, n )
	arr5 := mypublic.CopyIntArray( arr1, n )
	arr6 := mypublic.CopyIntArray( arr1, n )
	mypublic.TestSort("MergeSort", MergeSort, arr1, n )
	mypublic.TestSort("QuickSort", QuickSort3Ways, arr2, n )
	mypublic.TestSort("SelectSort", SelectSort, arr3, n )
	mypublic.TestSort("BubbleSort", BubbleSort, arr4, n )
	mypublic.TestSort("HeapSort", HeapSort, arr5, n )
	mypublic.TestSort("ShellSort", ShellSort, arr6, n )
}

func TestSortMain() {
	n := 20000
	/* 测试1 一般测试 */
	fmt.Println( "Test for random array, size =", n, ", random range [0,", n, "]" )
	arr1 := mypublic.GenerateRandomArray( n, 0, 100000 )
	arr2 := mypublic.CopyIntArray( arr1, n )
	//arr3 := mypublic.CopyIntArray( arr1, n )
	//arr4 := mypublic.CopyIntArray( arr1, n )
	arr5 := mypublic.CopyIntArray( arr1, n )
	arr6 := mypublic.CopyIntArray( arr1, n )
	arr7 := mypublic.CopyIntArray( arr1, n )
	arr8 := mypublic.CopyIntArray( arr1, n )
	arr9 := mypublic.CopyIntArray( arr1, n )
	arr10 := mypublic.CopyIntArray( arr1, n )
	arr11 := mypublic.CopyIntArray( arr1, n )
	arr12 := mypublic.CopyIntArray( arr1, n )
	mypublic.TestSort("Selection Sort", selectSort, arr1, n )
	mypublic.TestSort( "Insertion Sort", insertSort, arr2, n )
	//mypublic.TestSort("Bubble Sort", bubbleSort, arr3, n )
	//mypublic.TestSort("Shell Sort", shellSort, arr4, n )
	mypublic.TestSort("Merge Sort", mergeSortBU, arr5, n )
	mypublic.TestSort("Quick Sort", quickSort, arr6, n )
	mypublic.TestSort("Quick Sort3Ways", quickSort3Ways, arr7, n )
	mypublic.TestSort("Heap Sort1", heapSort1, arr8, n )
	mypublic.TestSort("Heap Sort2", heapSort2, arr9, n )
	mypublic.TestSort("Heap Sort3", heapSort3, arr10, n )
	mypublic.TestSort("minHeap Sort1", heapSortUsingMinHeap, arr11, n )
	mypublic.TestSort("minHeap Sort2", heapSortUsingMinHeap2, arr12, n )

	/* 测试2 有序性更强的测试 */
	fmt.Println( "Test for more ordered random array, size =", n, ", random range [0, 3]" )
	arr1 = mypublic.GenerateRandomArray( n, 0, 3 )
	arr2 = mypublic.CopyIntArray( arr1, n )
	//arr3 = mypublic.CopyIntArray( arr1, n )
	//arr4 = mypublic.CopyIntArray( arr1, n )
	arr5 = mypublic.CopyIntArray( arr1, n )
	arr6 = mypublic.CopyIntArray( arr1, n )
	arr7 = mypublic.CopyIntArray( arr1, n )
	arr8 = mypublic.CopyIntArray( arr1, n )
	arr9 = mypublic.CopyIntArray( arr1, n )
	arr10 = mypublic.CopyIntArray( arr1, n )
	arr11 = mypublic.CopyIntArray( arr1, n )
	arr12 = mypublic.CopyIntArray( arr1, n )
	//mypublic.TestSort("Selection Sort", selectSort, arr1, n )
	mypublic.TestSort( "Insertion Sort", insertSort, arr2, n )
	//mypublic.TestSort("Bubble Sort", bubbleSort, arr3, n )
	//mypublic.TestSort("Shell Sort", shellSort, arr4, n )
	mypublic.TestSort("Merge Sort", mergeSortBU, arr5, n )
	mypublic.TestSort("Quick Sort", quickSort, arr6, n )
	mypublic.TestSort("Quick Sort3Ways", quickSort3Ways, arr7, n )
	mypublic.TestSort("Heap Sort1", heapSort1, arr8, n )
	mypublic.TestSort("Heap Sort2", heapSort2, arr9, n )
	mypublic.TestSort("Heap Sort3", heapSort3, arr10, n )
	mypublic.TestSort("minHeap Sort1", heapSortUsingMinHeap, arr11, n )
	mypublic.TestSort("minHeap Sort2", heapSortUsingMinHeap2, arr12, n )

	/* 测试2 测试近乎有序的数组 */
	swapTime := 100
	fmt.Println( "Test for more ordered random array, size =", n, ", swap time =", swapTime )
	arr1 = mypublic.GenerateNearlyOrderedArray( n, swapTime )
	arr2 = mypublic.CopyIntArray( arr1, n )
	//arr3 = mypublic.CopyIntArray( arr1, n )
	//arr4 = mypublic.CopyIntArray( arr1, n )
	arr5 = mypublic.CopyIntArray( arr1, n )
	arr6 = mypublic.CopyIntArray( arr1, n )
	arr7 = mypublic.CopyIntArray( arr1, n )
	arr8 = mypublic.CopyIntArray( arr1, n )
	arr9 = mypublic.CopyIntArray( arr1, n )
	arr10 = mypublic.CopyIntArray( arr1, n )
	arr11 = mypublic.CopyIntArray( arr1, n )
	arr12 = mypublic.CopyIntArray( arr1, n )
	//mypublic.TestSort("Selection Sort", selectSort, arr1, n )
	mypublic.TestSort( "Insertion Sort", insertSort, arr2, n )
	//mypublic.TestSort("Bubble Sort", bubbleSort, arr3, n )
	//mypublic.TestSort("Shell Sort", shellSort, arr4, n )
	mypublic.TestSort("Merge Sort", mergeSortBU, arr5, n )
	mypublic.TestSort("Quick Sort", quickSort, arr6, n )
	mypublic.TestSort("Quick Sort3Ways", quickSort3Ways, arr7, n )
	mypublic.TestSort("Heap Sort1", heapSort1, arr8, n )
	mypublic.TestSort("Heap Sort2", heapSort2, arr9, n )
	mypublic.TestSort("Heap Sort3", heapSort3, arr10, n )
	mypublic.TestSort("minHeap Sort1", heapSortUsingMinHeap, arr11, n )
	mypublic.TestSort("minHeap Sort2", heapSortUsingMinHeap2, arr12, n )
}

